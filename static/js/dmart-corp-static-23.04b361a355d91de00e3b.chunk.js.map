{"version":3,"sources":["redux/Investors/epic.ts","redux/FeedbackForm/functions.ts","redux/FeedbackForm/reducers.ts","redux/Investors/reducers.ts","redux/PartnerWithUs/reducers.ts","redux/Screen/reducers.ts","reducers/index.ts","store/index.ts","redux/FeedbackForm/epic.ts","redux/Screen/types.ts","redux/FeedbackForm/types.ts","redux/PartnerWithUs/epic.ts","redux/PartnerWithUs/types.ts","serviceWorker.ts","redux/Investors/types.ts","utils/functions.ts"],"names":["process","REACT_APP_API_URL","REACT_APP_CONTENT_BASE_URL","REACT_APP_CONTENT_API","CONTENT_API","GetInvestorRelationsContentEpic","action$","pipe","ofType","GetInvestorRelationsContentAction","name","mergeMap","action","ajax","method","url","headers","async","crossDomain","map","response","successAction","catchError","error","of","failureAction","GetCitiesAndStores","storeList","state","city","CityStateDataByLocation","cityDataByState","groupBy","sortBy","stateList","_map","keysIn","cityStoreList","uniqBy","orderBy","filter","item","siteCity","cityList","cityStores","locationType","locationName","getStoresByLocationType","list","INITIAL_FORM_STATE","userType","store","emailId","mobile","addressLine1","addressLine2","pincode","comments","storecode","mode","ModeTypes","ModeTypeEnums","WEBSITE","INITIAL_STATE","sendFeedbackData","ActionStatus","NONE","getStoreList","allStores","submitFeedback","errorData","siteId","formData","kioskMode","FeedbackReducer","type","ClearStateAction","SendFeedbackDataAction","LOADING","success","SUCCESS","failure","payload","FAILURE","GetStoreListAction","get","UpdateSiteIdAction","UpdateFormAction","ChangeStateOrCityAction","selectedState","UpdateViewModeAction","INSTORE","QR","includes","INITIAL_SELECTION","section","sections","submenus","submenu","subcategoryContent","subcategories","subcategory","submenuContent","showSubCategory","fileContent","fileLinks","showFiles","getInvestorRelations","investorRelationsContent","selections","InvestorRelationsReducer","Data","sort","a","b","Number","content","sequence","isEmpty","head","subMenus","subCategories","showFilesForSubCategories","cat","length","files","fileName","fileId","heading","ChangeSectionAction","selectedSection","selectedMenu","selectedCategory","SelectedCategoryAction","some","additionalData","company","website","firstname","lastname","telno","location","companyAddress","category","goodsOffered","pancard","gst","gstRegistrationType","periodInDistribution","areaCovered","turnover","cessNo","RTname1","RTvalue1","RTname2","RTvalue2","RTname3","RTvalue3","INITIAL_LANDLORD_FORM_STATE","lastName","landmark","address","landlordType","landAddress","landlocation","plotSize","frontage","landLength","landWidth","carpetArea","floorArea","commercialArea","roadWidth","roadSideWidth","serviceRoads","propertyType","dayTimeStreetTraffic","nightTimeStreetTraffic","developerName","majorResidentialProjects","commercialProjectsDone","presence","catchment","sendFormData","landlordFormData","saveImages","fileIds","images","PartnerReducer","UpdateLandlordFormAction","CityStateData","cities","SendFormDataAction","SaveImagesAction","image","meta","console","log","newImages","GetStatesAction","isDesktopView","ScreenReducer","ScreenSizeAction","Reducer","combineReducers","investorRelations","feedbackReducer","partnerReducer","screenReducer","epicMiddleware","createEpicMiddleware","configureStore","middlewares","createStore","rootReducer","applyMiddleware","run","rootEpic","persistor","persistStore","REACT_APP_FEEDBACK_BASE_URL","REACT_APP_FEEDBACK_API","FEEDBACK_URL","SendFeedbackDataEpic","ActionPayload","body","JSON","stringify","withCredentials","GetStoreListEpic","switchMap","decodeURIComponent","query","CreateAction","kiosk","qr","REACT_APP_PARTNER_BASE_URL","REACT_APP_PARTNER_UPLOAD_VERB","REACT_APP_PARTNER_REGISTER_VERB","sendPartnerDataURL","saveImagesURL","SendPartnerDataEpic","SaveImagesEpic","data","Boolean","window","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","FormError","rem","value","base","toFixed","actionName","id","nanoid","cancel","clear","progress","reload","cancelAction","clearAction","progressAction","reloadAction"],"mappings":"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","file":"static/js/dmart-corp-static-23.04b361a355d91de00e3b.chunk.js","sourcesContent":["import { ofType, ActionsObservable } from 'redux-observable';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ajax, AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport { stringify } from 'query-string';\nimport { of } from 'rxjs/internal/observable/of';\nimport { GetInvestorRelationsContentAction, InvestorRelationsActions } from './types';\n\nconst {\n\tREACT_APP_API_URL = '',\n\tREACT_APP_CONTENT_BASE_URL = '',\n\tREACT_APP_CONTENT_API = ''\n} = process.env;\nconst CONTENT_API = REACT_APP_API_URL + REACT_APP_CONTENT_BASE_URL + REACT_APP_CONTENT_API;\n/**\n *  Epic\n * @param {any} action$ -  Action.\n * @param {any} state$ -  state.\n * @returns {any}  Epic.\n */\nconst GetInvestorRelationsContentEpic = (action$: ActionsObservable<InvestorRelationsActions>) =>\n\taction$.pipe(\n\t\tofType(GetInvestorRelationsContentAction.name),\n\t\tmergeMap((action) => {\n\t\t\treturn ajax({\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: `${CONTENT_API}?contentPlaceholder=InvestorRelations_Details&isPublished=true&page=InvestorRelationPage`,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tasync: true,\n\t\t\t\tcrossDomain: true\n\t\t\t}).pipe(\n\t\t\t\tmap((response: AjaxResponse) =>\n\t\t\t\t\tGetInvestorRelationsContentAction.successAction(response, action)\n\t\t\t\t),\n\t\t\t\tcatchError((error: AjaxError) =>\n\t\t\t\t\tof(GetInvestorRelationsContentAction.failureAction(error, action))\n\t\t\t\t)\n\t\t\t);\n\t\t})\n\t);\nexport default GetInvestorRelationsContentEpic;\n","import orderBy from 'lodash/orderBy';\nimport groupBy from 'lodash/groupBy';\nimport keysIn from 'lodash/keysIn';\nimport _map from 'lodash/map';\nimport uniqBy from 'lodash/uniqBy';\nimport sortBy from 'lodash/sortBy';\nimport filter from 'lodash/filter';\n\nexport const GetCitiesAndStores = (storeList, state = '', city = '') => {\n\tconst CityStateDataByLocation = storeList;\n\tconst cityDataByState = groupBy(sortBy(CityStateDataByLocation, 'siteState'), 'siteState');\n\tconst stateList = _map(keysIn(cityDataByState));\n\tconst cityStoreList =\n\t\tstate !== ''\n\t\t\t? uniqBy(\n\t\t\t\t\torderBy(\n\t\t\t\t\t\tfilter(cityDataByState[state], (item) => item.siteCity !== ''),\n\t\t\t\t\t\t['siteCity'],\n\t\t\t\t\t\t['asc']\n\t\t\t\t\t),\n\t\t\t\t\t'siteCity'\n\t\t\t  )\n\t\t\t: [];\n\tconst cityList = cityStoreList.map(({ siteCity }) => siteCity);\n\tconst cityStores =\n\t\tcity !== ''\n\t\t\t? orderBy(\n\t\t\t\t\tfilter(\n\t\t\t\t\t\tcityStoreList,\n\t\t\t\t\t\t(item) => item.siteCity === city && item.locationType === 'Store'\n\t\t\t\t\t),\n\t\t\t\t\t['locationName'],\n\t\t\t\t\t['asc']\n\t\t\t  ).map(({ locationName }) => locationName)\n\t\t\t: [];\n\treturn { stateList, cityList, cityStores };\n};\n\nexport const getStoresByLocationType = (storeList, locationType) => {\n\tlet list = storeList;\n\tif (locationType !== '') {\n\t\tlist = filter(storeList, (item) => {\n\t\t\treturn item.locationType === locationType;\n\t\t});\n\t}\n\treturn list;\n};\n","import get from 'lodash/get';\nimport { AjaxError, AjaxResponse } from 'rxjs/ajax';\n\nimport { ActionStatus } from '../../utils/functions';\nimport { GetCitiesAndStores, getStoresByLocationType } from './functions';\nimport {\n\tChangeStateOrCityAction,\n\tClearStateAction,\n\tFeedbackFormActions,\n\tFeedbackFormPayload,\n\tFeedbackFormState,\n\tFormPayload,\n\tGetStoreListAction,\n\tModeTypeEnums,\n\tModeTypes,\n\tSendFeedbackDataAction,\n\tUpdateFormAction,\n\tUpdateSiteIdAction,\n\tUpdateViewModeAction\n} from './types';\n\nconst INITIAL_FORM_STATE: FeedbackFormPayload = {\n\tlocationType: '',\n\tuserType: '',\n\tstate: '',\n\tstore: '',\n\tcity: '',\n\tname: '',\n\temailId: '',\n\tmobile: '',\n\taddressLine1: '',\n\taddressLine2: '',\n\tpincode: '',\n\tcomments: '',\n\tstorecode: '',\n\tmode: ModeTypes[ModeTypeEnums.WEBSITE]\n};\nconst INITIAL_STATE: FeedbackFormState = {\n\tsendFeedbackData: ActionStatus.NONE,\n\tgetStoreList: ActionStatus.NONE,\n\tstoreList: [],\n\tallStores: [],\n\tsubmitFeedback: ActionStatus.NONE,\n\terrorData: {},\n\tsiteId: '',\n\tformData: INITIAL_FORM_STATE,\n\tstateList: [],\n\tcityList: [],\n\tcityStores: [],\n\tmode: ModeTypeEnums.WEBSITE,\n\tkioskMode: false\n};\n/**\n * Reducer.\n * @param {any} state -  state.\n * @param {any} action - One of actions\n * @returns {any}  state object.\n */\nconst FeedbackReducer = (\n\tstate: FeedbackFormState = INITIAL_STATE,\n\taction: FeedbackFormActions\n): FeedbackFormState => {\n\tswitch (action.type) {\n\t\tcase ClearStateAction.name: {\n\t\t\tconst { allStores, storeList, stateList } = state;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...INITIAL_STATE,\n\t\t\t\tallStores,\n\t\t\t\tstoreList,\n\t\t\t\tstateList\n\t\t\t};\n\t\t}\n\t\tcase SendFeedbackDataAction.name: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsendFeedbackData: ActionStatus.LOADING,\n\t\t\t\tsubmitFeedback: ActionStatus.LOADING\n\t\t\t};\n\t\t}\n\t\tcase SendFeedbackDataAction.success: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsendFeedbackData: ActionStatus.SUCCESS,\n\t\t\t\tsubmitFeedback: ActionStatus.SUCCESS\n\t\t\t};\n\t\t}\n\t\tcase SendFeedbackDataAction.failure: {\n\t\t\tconst response = action.payload as AjaxError;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsendFeedbackData: ActionStatus.FAILURE,\n\t\t\t\tsubmitFeedback: ActionStatus.FAILURE,\n\t\t\t\terrorData: response\n\t\t\t};\n\t\t}\n\t\tcase GetStoreListAction.name: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgetStoreList: ActionStatus.LOADING,\n\t\t\t\tformData: INITIAL_FORM_STATE\n\t\t\t};\n\t\t}\n\t\tcase GetStoreListAction.success: {\n\t\t\tconst { response } = action.payload as AjaxResponse;\n\t\t\tlet storeList = response;\n\t\t\tconst locationType = get(state.formData, 'locationType', '');\n\t\t\tstoreList = getStoresByLocationType(storeList, locationType);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgetStoreList: ActionStatus.SUCCESS,\n\t\t\t\tallStores: response,\n\t\t\t\tstoreList,\n\t\t\t\t...GetCitiesAndStores(response)\n\t\t\t};\n\t\t}\n\t\tcase GetStoreListAction.failure: {\n\t\t\tconst response = action.payload as AjaxError;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgetStoreList: ActionStatus.FAILURE,\n\t\t\t\terrorData: response\n\t\t\t};\n\t\t}\n\t\tcase UpdateSiteIdAction.name: {\n\t\t\tconst siteId: any = get(action, 'payload', '');\n\t\t\treturn { ...state, siteId };\n\t\t}\n\t\tcase UpdateFormAction.name: {\n\t\t\tconst payload: any = get(action, 'payload', {} as FormPayload);\n\t\t\treturn { ...state, formData: { ...state.formData, ...payload } };\n\t\t}\n\t\tcase ChangeStateOrCityAction.name: {\n\t\t\tlet selectedState = get(action.payload, 'state', '');\n\t\t\tconst city = get(action.payload, 'city', '');\n\t\t\tconst locationType = get(state.formData, 'locationType', '');\n\t\t\tlet storeList = get(state, 'allStores', []);\n\t\t\tstoreList = getStoresByLocationType(storeList, locationType);\n\t\t\tif (selectedState === '' && city !== '') {\n\t\t\t\tselectedState = get(state.formData, 'state', '');\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstoreList,\n\t\t\t\t...GetCitiesAndStores(storeList, selectedState, city),\n\t\t\t\tformData: { ...state.formData, state: selectedState, city, store: '' }\n\t\t\t};\n\t\t}\n\t\tcase UpdateViewModeAction.name: {\n\t\t\tconst mode =\n\t\t\t\tget(action, 'payload', '') === '' ? ModeTypeEnums.WEBSITE : (action.payload as any);\n\t\t\tconst kioskMode = [ModeTypeEnums.INSTORE, ModeTypeEnums.QR].includes(mode);\n\t\t\treturn { ...state, mode: ModeTypes[mode], kioskMode };\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nexport default FeedbackReducer;\n","import get from 'lodash/get';\nimport _map from 'lodash/map';\nimport head from 'lodash/head';\nimport { AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport isEmpty from 'lodash/isEmpty';\nimport { ActionStatus } from '../../utils/functions';\nimport {\n\tChangeSectionAction,\n\tGetInvestorRelationsContentAction,\n\tInvestorRelationsActions,\n\tInvestorRelationsState,\n\tSelections,\n\tSelectedCategoryAction\n} from './types';\n// import ContentResponse from '../../constants/response'\n\nconst INITIAL_SELECTION: Selections = {\n\tsection: '',\n\tsections: [],\n\tsubmenus: [],\n\tsubmenu: '',\n\tsubcategoryContent: {},\n\tsubcategories: [],\n\tsubcategory: '',\n\tsubmenuContent: {},\n\tshowSubCategory: false,\n\tfileContent: {},\n\tfileLinks: [],\n\tshowFiles: []\n};\nconst INITIAL_STATE: InvestorRelationsState = {\n\terrorData: {},\n\tgetInvestorRelations: ActionStatus.NONE,\n\tinvestorRelationsContent: [],\n\tselections: INITIAL_SELECTION\n};\n\n/**\n * Reducer.\n * @param {state} state -  state.\n * @param {actions} action - One of actions\n * @returns {state}  state object.\n */\nconst InvestorRelationsReducer = (\n\tstate = INITIAL_STATE,\n\taction: InvestorRelationsActions\n): InvestorRelationsState => {\n\tswitch (action.type) {\n\t\tcase GetInvestorRelationsContentAction.name: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgetInvestorRelations: ActionStatus.LOADING,\n\t\t\t\tinvestorRelationsContent: [],\n\t\t\t\tselections: INITIAL_SELECTION\n\t\t\t};\n\t\t}\n\t\tcase GetInvestorRelationsContentAction.success: {\n\t\t\tconst { response } = action.payload as AjaxResponse;\n\t\t\t// const response = ContentResponse;\n\t\t\tconst Data: any = response.sort((a, b) => {\n\t\t\t\tif (Number(a.content.sequence) === Number(b.content.sequence)) return 0;\n\t\t\t\tif (Number(a.content.sequence) > Number(b.content.sequence)) return 1;\n\t\t\t\treturn -1;\n\t\t\t});\n\t\t\tconst sections = _map(Data, 'content.investorCategoryName');\n\t\t\tlet section = get(state, 'selections.section', '');\n\t\t\tif (!isEmpty(sections) && section === '') {\n\t\t\t\tsection = head(sections);\n\t\t\t}\n\t\t\tconst submenuContent = head(\n\t\t\t\tData.filter((item) => {\n\t\t\t\t\tconst currentSection = get(item, 'content.investorCategoryName', '');\n\t\t\t\t\treturn currentSection === section;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst subMenus = get(submenuContent, 'content.subMenus', []); // Array of objects\n\t\t\tconst submenus = _map(subMenus, 'name'); // Display list - Array of strings\n\t\t\tconst submenu = get(state, 'selections.submenu', '') || head(submenus); // Selected\n\t\t\tconst subcategoryContent = head(\n\t\t\t\t// Selected submenu\n\t\t\t\tsubMenus.filter((item) => {\n\t\t\t\t\tconst currentSubMenu = get(item, 'name', '');\n\t\t\t\t\treturn currentSubMenu === submenu;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst subCategories = get(subcategoryContent, 'subCategories', []).filter(\n\t\t\t\t(subcategory) => {\n\t\t\t\t\tconst show = get(subcategory, 'additionalData.display', 'true');\n\t\t\t\t\treturn show === 'true';\n\t\t\t\t}\n\t\t\t); // Array of objects\n\t\t\tconst showFilesForSubCategories = get(subcategoryContent, 'subCategories', []).filter(\n\t\t\t\t(cat) => {\n\t\t\t\t\tconst show = get(cat, 'additionalData.display', 'true');\n\t\t\t\t\treturn show === 'false';\n\t\t\t\t}\n\t\t\t);\n\t\t\tlet showFiles = [];\n\t\t\tif (showFilesForSubCategories.length > 0) {\n\t\t\t\tshowFiles = showFilesForSubCategories.map((item) => {\n\t\t\t\t\tconst files = get(item, 'files', []).map(({ fileName, fileId }) => ({\n\t\t\t\t\t\tfileName,\n\t\t\t\t\t\tfileId\n\t\t\t\t\t}));\n\t\t\t\t\tconst heading = get(item, 'name', '');\n\t\t\t\t\treturn { files, heading };\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst subcategories = _map(subCategories, 'name'); // Display list - Array of strings\n\t\t\tconst subcategory = get(state, 'selections.category', '') || head(subcategories); // Selected\n\t\t\tconst fileContent = head(\n\t\t\t\t// Selected category\n\t\t\t\tsubCategories.filter((item) => {\n\t\t\t\t\tconst currentSubCategory = get(item, 'name', '');\n\t\t\t\t\treturn currentSubCategory === subcategory;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst files = get(fileContent, 'files', []);\n\t\t\tconst fileLinks = files.map(({ fileName, fileId }) => ({ fileName, fileId }));\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgetInvestorRelations: ActionStatus.SUCCESS,\n\t\t\t\tinvestorRelationsContent: Data,\n\t\t\t\tselections: {\n\t\t\t\t\t...state.selections,\n\t\t\t\t\tsections,\n\t\t\t\t\tsection,\n\t\t\t\t\tsubmenuContent,\n\t\t\t\t\tsubmenus,\n\t\t\t\t\tsubmenu,\n\t\t\t\t\tsubcategoryContent,\n\t\t\t\t\tsubcategories,\n\t\t\t\t\tsubcategory,\n\t\t\t\t\tshowFiles,\n\t\t\t\t\tfileContent,\n\t\t\t\t\tfileLinks\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tcase GetInvestorRelationsContentAction.failure: {\n\t\t\tconst response = action.payload as AjaxError;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgetInvestorRelations: ActionStatus.FAILURE,\n\t\t\t\tinvestorRelationsContent: [],\n\t\t\t\terrorData: response\n\t\t\t};\n\t\t}\n\t\tcase ChangeSectionAction.name: {\n\t\t\t// const selectedSection = get(action, 'payload', '') as string;\n\t\t\tconst selectedSection = get(action.payload, 'section', '');\n\t\t\tconst selectedMenu = get(action.payload, 'menu', '');\n\t\t\tconst selectedCategory = get(action.payload, 'category', '');\n\t\t\tconst submenuContent = head(\n\t\t\t\tstate.investorRelationsContent.filter((item) => {\n\t\t\t\t\tconst currentSection = get(item, 'content.investorCategoryName', '');\n\t\t\t\t\treturn currentSection === selectedSection;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst subMenus = get(submenuContent, 'content.subMenus', []);\n\t\t\tconst submenus = _map(subMenus, 'name');\n\t\t\tconst submenu = selectedMenu !== '' ? selectedMenu : head(submenus);\n\t\t\tconst subcategoryContent = head(\n\t\t\t\tsubMenus.filter((item) => {\n\t\t\t\t\tconst currentSubMenu = get(item, 'name', '');\n\t\t\t\t\treturn currentSubMenu === submenu;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst subCategories = get(subcategoryContent, 'subCategories', []).filter(\n\t\t\t\t(subcategory) => {\n\t\t\t\t\tconst show = get(subcategory, 'additionalData.display', 'true');\n\t\t\t\t\treturn show === 'true';\n\t\t\t\t}\n\t\t\t); // Array of objects\n\t\t\tconst showFilesForSubCategories = get(subcategoryContent, 'subCategories', []).filter(\n\t\t\t\t(cat) => {\n\t\t\t\t\tconst show = get(cat, 'additionalData.display', 'true');\n\t\t\t\t\treturn show === 'false';\n\t\t\t\t}\n\t\t\t);\n\t\t\tlet showFiles = [];\n\t\t\tif (showFilesForSubCategories.length > 0) {\n\t\t\t\tshowFiles = showFilesForSubCategories.map((item) => {\n\t\t\t\t\tconst files = get(item, 'files', []).map(({ fileName, fileId }) => ({\n\t\t\t\t\t\tfileName,\n\t\t\t\t\t\tfileId\n\t\t\t\t\t}));\n\t\t\t\t\tconst heading = get(item, 'name', '');\n\t\t\t\t\treturn { files, heading };\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst subcategories = _map(subCategories, 'name');\n\t\t\tconst subcategory = selectedCategory !== '' ? selectedCategory : head(subcategories);\n\t\t\tconst fileContent = head(\n\t\t\t\tsubCategories.filter((item) => {\n\t\t\t\t\tconst currentSubCategory = get(item, 'name', '');\n\t\t\t\t\treturn currentSubCategory === subcategory;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst files = get(fileContent, 'files', []);\n\t\t\tconst fileLinks = files.map(({ fileName, fileId }) => ({ fileName, fileId }));\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselections: {\n\t\t\t\t\t...state.selections,\n\t\t\t\t\tsection: selectedSection,\n\t\t\t\t\tsubmenus,\n\t\t\t\t\tsubmenu,\n\t\t\t\t\tsubmenuContent,\n\t\t\t\t\tsubcategoryContent,\n\t\t\t\t\tsubcategories,\n\t\t\t\t\tsubcategory,\n\t\t\t\t\tshowFiles,\n\t\t\t\t\tfileContent,\n\t\t\t\t\tfileLinks\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tcase SelectedCategoryAction.name: {\n\t\t\tconst selectedCategory = get(action, 'payload', '') as string;\n\t\t\tconst submenuContent = get(state, 'selections.submenuContent', {});\n\t\t\tconst subMenus = get(submenuContent, 'content.subMenus', []);\n\t\t\tconst subcategoryContent = head(\n\t\t\t\tsubMenus.filter((item) => {\n\t\t\t\t\tconst currentSubMenu = get(item, 'name', '');\n\t\t\t\t\treturn currentSubMenu === selectedCategory;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst subCategories = get(subcategoryContent, 'subCategories', []);\n\t\t\tconst showSubCategory = subCategories.some(\n\t\t\t\t({ additionalData }) =>\n\t\t\t\t\tget(additionalData, 'display', false) === true ||\n\t\t\t\t\tget(additionalData, 'display', '') === 'true'\n\t\t\t);\n\t\t\tconst subcategories = _map(subCategories, 'name');\n\t\t\tconst subcategory = head(subcategories);\n\t\t\tconst fileContent = head(\n\t\t\t\tsubCategories.filter((item) => {\n\t\t\t\t\tconst currentSubCategory = get(item, 'name', '');\n\t\t\t\t\treturn currentSubCategory === subcategory;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst files = get(fileContent, 'files', []);\n\t\t\tconst fileLinks = files.map(({ fileName, fileId }) => ({ fileName, fileId }));\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselections: {\n\t\t\t\t\t...state.selections,\n\t\t\t\t\tsubcategoryContent,\n\t\t\t\t\tsubcategories,\n\t\t\t\t\tsubcategory,\n\t\t\t\t\tshowSubCategory,\n\t\t\t\t\tshowFiles: [],\n\t\t\t\t\tfileContent,\n\t\t\t\t\tfileLinks\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default InvestorRelationsReducer;\n","import get from 'lodash/get';\nimport { AjaxError, AjaxResponse } from 'rxjs/ajax';\nimport sortBy from 'lodash/sortBy';\nimport groupBy from 'lodash/groupBy';\nimport keysIn from 'lodash/keysIn';\nimport map from 'lodash/map';\nimport isEmpty from 'lodash/isEmpty';\nimport CityStateData from '../../constants/states.json';\nimport {\n\tChangeStateOrCityAction,\n\tClearStateAction,\n\tFeedbackFormActions,\n\tPartnerFormPayload,\n\tPartnerFormState,\n\tFormPayload,\n\tUpdateFormAction,\n\tSendFormDataAction,\n\tSaveImagesAction,\n\tLandlordFormPayload,\n\tGetStatesAction,\n\tUpdateLandlordFormAction\n} from './types';\nimport { ActionStatus } from '../../utils/functions';\n\nconst INITIAL_FORM_STATE: PartnerFormPayload = {\n\tcompany: '',\n\twebsite: '',\n\tfirstname: '',\n\tlastname: '',\n\temailId: '',\n\tmobile: '',\n\ttelno: '',\n\tstate: '',\n\tcity: '',\n\tlocation: '',\n\tcompanyAddress: '',\n\tcategory: '',\n\tgoodsOffered: '',\n\tpancard: '',\n\tgst: '',\n\tgstRegistrationType: '',\n\tperiodInDistribution: '',\n\tareaCovered: '',\n\tturnover: '',\n\tcessNo: '',\n\tRTname1: '',\n\tRTvalue1: '',\n\tRTname2: '',\n\tRTvalue2: '',\n\tRTname3: '',\n\tRTvalue3: '',\n\tpincode: ''\n};\nconst INITIAL_LANDLORD_FORM_STATE: LandlordFormPayload = {\n\tfirstname: '',\n\tlastName: '',\n\temailId: '',\n\tmobile: '',\n\tstate: '',\n\tcity: '',\n\tlocation: '',\n\tlandmark: '',\n\taddress: '',\n\tpincode: '',\n\tlandlordType: '',\n\tlandAddress: '',\n\tlandlocation: '',\n\tplotSize: '',\n\tfrontage: '',\n\tlandLength: '',\n\tlandWidth: '',\n\tcarpetArea: '',\n\tfloorArea: '',\n\tcommercialArea: '',\n\troadWidth: '',\n\troadSideWidth: '',\n\tserviceRoads: '',\n\tpropertyType: '',\n\tdayTimeStreetTraffic: '',\n\tnightTimeStreetTraffic: '',\n\tdeveloperName: '',\n\tmajorResidentialProjects: '',\n\tcommercialProjectsDone: '',\n\tpresence: '',\n\tcatchment: ''\n};\nconst INITIAL_STATE: PartnerFormState = {\n\tsendFormData: ActionStatus.NONE,\n\tstoreList: [],\n\terrorData: {},\n\tformData: INITIAL_FORM_STATE,\n\tlandlordFormData: INITIAL_LANDLORD_FORM_STATE,\n\tstateList: [],\n\tcityList: [],\n\tsaveImages: ActionStatus.NONE,\n\tfileIds: [],\n\timages: []\n};\n/**\n * Reducer.\n * @param {any} state -  state.\n * @param {any} action - One of actions\n * @returns {any}  state object.\n */\nconst PartnerReducer = (\n\tstate: PartnerFormState = INITIAL_STATE,\n\taction: FeedbackFormActions\n): PartnerFormState => {\n\tswitch (action.type) {\n\t\tcase ClearStateAction.name: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...INITIAL_STATE\n\t\t\t};\n\t\t}\n\t\tcase UpdateFormAction.name: {\n\t\t\tconst payload: any = get(action, 'payload', {} as FormPayload);\n\t\t\treturn { ...state, formData: { ...state.formData, ...payload } };\n\t\t}\n\t\tcase UpdateLandlordFormAction.name: {\n\t\t\tconst payload: any = get(action, 'payload', {} as FormPayload);\n\t\t\treturn { ...state, landlordFormData: { ...state.landlordFormData, ...payload } };\n\t\t}\n\t\tcase ChangeStateOrCityAction.name: {\n\t\t\tconst cityDataByState = groupBy(sortBy(CityStateData, 'state'), 'state');\n\t\t\tconst stateList = map(keysIn(cityDataByState));\n\t\t\tconst selectedState = get(action.payload, 'state', '');\n\t\t\tconst cities = cityDataByState[selectedState];\n\t\t\tconst cityList = cities.map(({ name }) => name);\n\t\t\treturn { ...state, stateList, cityList };\n\t\t}\n\t\tcase SendFormDataAction.name: {\n\t\t\treturn { ...state, sendFormData: ActionStatus.LOADING };\n\t\t}\n\t\tcase SendFormDataAction.success: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsendFormData: ActionStatus.SUCCESS,\n\t\t\t\tformData: INITIAL_FORM_STATE,\n\t\t\t\tlandlordFormData: INITIAL_LANDLORD_FORM_STATE\n\t\t\t};\n\t\t}\n\t\tcase SendFormDataAction.failure: {\n\t\t\treturn { ...state, sendFormData: ActionStatus.FAILURE };\n\t\t}\n\t\tcase SaveImagesAction.name: {\n\t\t\treturn { ...state, saveImages: ActionStatus.LOADING };\n\t\t}\n\t\tcase SaveImagesAction.success: {\n\t\t\tconst { response } = action.payload as AjaxResponse;\n\t\t\tconst image = get(action.meta, 'payload.image', {});\n\t\t\tlet images = get(state, 'images', []);\n\t\t\tconsole.log(isEmpty(image), isEmpty(keysIn(image)));\n\t\t\tif (isEmpty(keysIn(image))) {\n\t\t\t\tconst newImages = get(action.meta, 'payload.images', []);\n\t\t\t\timages = newImages;\n\t\t\t} else {\n\t\t\t\timages = [...images, image];\n\t\t\t}\n\t\t\treturn { ...state, saveImages: ActionStatus.SUCCESS, fileIds: response, images };\n\t\t}\n\t\tcase SaveImagesAction.failure: {\n\t\t\treturn { ...state, saveImages: ActionStatus.FAILURE };\n\t\t}\n\t\tcase GetStatesAction.name: {\n\t\t\tconst cityDataByState = groupBy(sortBy(CityStateData, 'state'), 'state');\n\t\t\tconst stateList = map(keysIn(cityDataByState));\n\t\t\treturn { ...state, stateList };\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nexport default PartnerReducer;\n","import get from 'lodash/get';\nimport { ScreenActions, ScreenSizeAction, ScreenState } from './types';\n\nconst INITIAL_STATE: ScreenState = {\n\tisDesktopView: false\n};\n\nconst ScreenReducer = (state = INITIAL_STATE, action: ScreenActions): ScreenState => {\n\tswitch (action.type) {\n\t\tcase ScreenSizeAction.name: {\n\t\t\tconst isDesktopView = get(action, 'payload', false);\n\t\t\treturn { ...state, isDesktopView };\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default ScreenReducer;\n","import { combineReducers } from 'redux';\nimport FeedbackReducer from '../redux/FeedbackForm/reducers';\nimport InvestorRelationsReducer from '../redux/Investors/reducers';\nimport PartnerReducer from '../redux/PartnerWithUs/reducers';\nimport ScreenReducer from '../redux/Screen/reducers';\n\nconst Reducer = combineReducers({\n\tinvestorRelations: InvestorRelationsReducer,\n\tfeedbackReducer: FeedbackReducer,\n\tpartnerReducer: PartnerReducer,\n\tscreenReducer: ScreenReducer\n});\nexport type RootState = ReturnType<typeof Reducer>;\nexport default Reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { persistStore } from 'redux-persist';\nimport { logger } from 'redux-logger';\nimport rootEpic from '../epics';\n\nimport rootReducer from '../reducers';\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst { NODE_ENV = 'development' } = process.env;\n\ntype reducer = ReturnType<typeof rootReducer>;\nexport type RootState = reducer;\n/**\n * Configure store.\n * @returns {object} store - Reducer global store.\n */\nexport default function configureStore() {\n\tconst middlewares: Array<any> = [epicMiddleware];\n\tif (NODE_ENV === `development`) {\n\t\tmiddlewares.push(logger);\n\t}\n\tconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\n\tepicMiddleware.run(rootEpic);\n\tconst persistor = persistStore(store);\n\treturn { store, persistor };\n}\n","import { ofType, ActionsObservable } from 'redux-observable';\nimport { map, catchError, mergeMap, switchMap } from 'rxjs/operators';\nimport { ajax, AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport { of } from 'rxjs';\nimport {\n\tClearStateAction,\n\tFeedbackFormActions,\n\tGetStoreListAction,\n\tGetStoreRequestPayload,\n\tSendFeedbackDataAction\n} from './types';\n\nconst {\n\tREACT_APP_API_URL = '',\n\tREACT_APP_FEEDBACK_BASE_URL = '',\n\tREACT_APP_FEEDBACK_API = ''\n} = process.env;\nconst FEEDBACK_URL = REACT_APP_API_URL + REACT_APP_FEEDBACK_BASE_URL + REACT_APP_FEEDBACK_API;\n/**\n *  Epic\n * @param {any} action$ -  Action.\n * @param {any} state$ -  state.\n * @returns {any}  Epic.\n */\nexport const SendFeedbackDataEpic = (action$: ActionsObservable<FeedbackFormActions>): any =>\n\taction$.pipe(\n\t\tofType(SendFeedbackDataAction.name),\n\t\tmergeMap((action) => {\n\t\t\tconst ActionPayload = action.payload as any;\n\t\t\treturn ajax({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: FEEDBACK_URL,\n\t\t\t\tbody: JSON.stringify(ActionPayload),\n\t\t\t\theaders: { 'Content-Type': 'application/json; charset=utf-8' },\n\t\t\t\tasync: true,\n\t\t\t\tcrossDomain: true,\n\t\t\t\twithCredentials: true\n\t\t\t}).pipe(\n\t\t\t\tmergeMap((response: AjaxResponse) =>\n\t\t\t\t\tof(\n\t\t\t\t\t\tSendFeedbackDataAction.successAction(response, action),\n\t\t\t\t\t\tClearStateAction.action()\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tcatchError((error: AjaxError) =>\n\t\t\t\t\tof(SendFeedbackDataAction.failureAction(error, action))\n\t\t\t\t)\n\t\t\t);\n\t\t})\n\t);\n\nexport const GetStoreListEpic = (action$: ActionsObservable<FeedbackFormActions>): any =>\n\taction$.pipe(\n\t\tofType(GetStoreListAction.name),\n\t\tswitchMap((action) => {\n\t\t\tconst ActionPayload = action.payload as GetStoreRequestPayload;\n\t\t\treturn ajax\n\t\t\t\t.get(`${ActionPayload?.url}?${decodeURIComponent(ActionPayload.query)}`, {})\n\t\t\t\t.pipe(\n\t\t\t\t\tmap((response: AjaxResponse) =>\n\t\t\t\t\t\tGetStoreListAction.successAction(response, action)\n\t\t\t\t\t),\n\t\t\t\t\tcatchError((error: AjaxError) =>\n\t\t\t\t\t\tof(GetStoreListAction.failureAction(error, action))\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t})\n\t);\n","import { CreateAction } from '../../utils/functions';\n/**\n * Screen Size Action.\n * @param {any} payload -  source Site Id.\n * @returns {any}  Action.\n */\nexport const ScreenSizeAction = CreateAction<boolean>('ScreenSize');\n\nexport interface ScreenState {\n\tisDesktopView: boolean;\n}\n\nexport interface ScreenActions {\n\ttype: string;\n\tpayload: boolean;\n\tmeta?: any;\n}\n","import { AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport { ActionStatus, CreateAction } from '../../utils/functions';\n\nexport interface FeedbackFormPayload {\n\tlocationType: string;\n\tuserType: string;\n\tstate: string;\n\tstore: string;\n\tcity: string;\n\tname: string;\n\temailId: string;\n\tmobile: string;\n\taddressLine1: string;\n\taddressLine2: string;\n\tpincode: string;\n\tcomments: string;\n\tstorecode: string;\n\tmode: string;\n}\nexport interface GetStoreRequestPayload {\n\tquery: string;\n\turl: string;\n}\n\nexport interface FormPayload {\n\t[name: string]: string;\n}\n/**\n * Get Store List Action.\n * @param {any} payload -  GetStoreRequestPayload.\n * @returns {any}  Action.\n */\nexport const GetStoreListAction = CreateAction<GetStoreRequestPayload>('GetStoreList');\n\n/**\n * Send Feedback Data Action.\n * @param {any} payload -  GetStoreRequestPayload.\n * @returns {any}  Action.\n */\nexport const SendFeedbackDataAction = CreateAction<FeedbackFormPayload | any>('SendFeedbackData');\n\n/**\n * Update SiteId Action.\n * @param {any} payload -  site Id as string.\n * @returns {any}  Action.\n */\nexport const UpdateSiteIdAction = CreateAction<string>('UpdateSiteId');\n\n/**\n * Change StateOrCity Action.\n * @param {any} payload -  site Id as string.\n * @returns {any}  Action.\n */\nexport const ChangeStateOrCityAction = CreateAction<FormPayload>('ChangeStateOrCity');\n\n/**\n * Clear State Action.\n * @param {any} payload -  any.\n * @returns {any}  Action.\n */\nexport const ClearStateAction = CreateAction('ClearState');\n\n/**\n * Update Form Action.\n * @param {any} payload - FormPayload.\n * @returns {any}  Action.\n */\nexport const UpdateFormAction = CreateAction<FormPayload>('UpdateForm');\n\nexport enum ModeTypeEnums {\n\tWEBSITE = 'website',\n\tINSTORE = 'kiosk',\n\tQR = 'qr'\n}\n\nexport const ModeTypes = {\n\twebsite: 'WEBSITE',\n\tkiosk: 'INSTORE',\n\tqr: 'QR'\n};\n\n/**\n * Update ViewMode Action.\n * @param {any} payload - string.\n * @returns {any}  Action.\n */\n\nexport const UpdateViewModeAction = CreateAction<string>('UpdateViewMode');\nexport interface FeedbackFormState {\n\tsendFeedbackData: ActionStatus;\n\tgetStoreList: ActionStatus;\n\tsubmitFeedback: ActionStatus;\n\terrorData: Partial<AjaxError>;\n\tstoreList: Array<any>;\n\tallStores: Array<any>;\n\tsiteId: string;\n\tformData: FeedbackFormPayload;\n\tstateList: Array<string>;\n\tcityList: Array<string>;\n\tcityStores: Array<string>;\n\tmode: string;\n\tkioskMode: boolean;\n}\n\nexport interface FeedbackFormActions {\n\ttype: string;\n\tpayload?:\n\t\t| string\n\t\t| AjaxResponse\n\t\t| AjaxError\n\t\t| FeedbackFormPayload\n\t\t| GetStoreRequestPayload\n\t\t| FormPayload;\n\tmeta?: any;\n}\n","import { ofType, ActionsObservable } from 'redux-observable';\nimport { map, catchError, mergeMap, switchMap } from 'rxjs/operators';\nimport { ajax, AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport { of } from 'rxjs';\nimport { FeedbackFormActions, SaveImagesAction, SendFormDataAction } from './types';\n\nconst {\n\tREACT_APP_API_URL = '',\n\tREACT_APP_PARTNER_BASE_URL = '',\n\tREACT_APP_PARTNER_UPLOAD_VERB = '',\n\tREACT_APP_PARTNER_REGISTER_VERB = ''\n} = process.env;\n\nconst sendPartnerDataURL =\n\tREACT_APP_API_URL + REACT_APP_PARTNER_BASE_URL + REACT_APP_PARTNER_REGISTER_VERB;\nconst saveImagesURL =\n\tREACT_APP_API_URL + REACT_APP_PARTNER_BASE_URL + REACT_APP_PARTNER_UPLOAD_VERB;\n/**\n *  SendPartnerDataEpic\n * @param {any} action$ -  Action.\n * @param {any} state$ -  state.\n * @returns {any}  Epic.\n */\nexport const SendPartnerDataEpic = (action$: ActionsObservable<FeedbackFormActions>): any =>\n\taction$.pipe(\n\t\tofType(SendFormDataAction.name),\n\t\tmergeMap((action) => {\n\t\t\tconst ActionPayload = action.payload as any;\n\t\t\treturn ajax({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: sendPartnerDataURL,\n\t\t\t\tbody: JSON.stringify(ActionPayload),\n\t\t\t\theaders: { 'Content-Type': 'application/json; charset=utf-8' },\n\t\t\t\tasync: true,\n\t\t\t\tcrossDomain: true,\n\t\t\t\twithCredentials: true\n\t\t\t}).pipe(\n\t\t\t\tmap((response: AjaxResponse) => SendFormDataAction.successAction(response, action)),\n\t\t\t\tcatchError((error: AjaxError) =>\n\t\t\t\t\tof(SendFormDataAction.failureAction(error, action))\n\t\t\t\t)\n\t\t\t);\n\t\t})\n\t);\n\n/**\n *  SaveImagesEpic\n * @param {any} action$ -  Action.\n * @param {any} state$ -  state.\n * @returns {any}  Epic.\n */\nexport const SaveImagesEpic = (action$: ActionsObservable<FeedbackFormActions>): any =>\n\taction$.pipe(\n\t\tofType(SaveImagesAction.name),\n\t\tmergeMap((action) => {\n\t\t\tconst { data } = action.payload;\n\t\t\treturn ajax({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: saveImagesURL,\n\t\t\t\tbody: data,\n\t\t\t\tasync: true,\n\t\t\t\tcrossDomain: true,\n\t\t\t\twithCredentials: true\n\t\t\t}).pipe(\n\t\t\t\tmap((response: AjaxResponse) => SaveImagesAction.successAction(response, action)),\n\t\t\t\tcatchError((error: AjaxError) => of(SaveImagesAction.failureAction(error, action)))\n\t\t\t);\n\t\t})\n\t);\n","import { AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport { ActionStatus, CreateAction } from '../../utils/functions';\n\nexport interface PartnerFormPayload {\n\tcompany: string;\n\twebsite: string;\n\tfirstname: string;\n\tlastname: string;\n\temailId: string;\n\tmobile: string;\n\ttelno: string;\n\tstate: string;\n\tcity: string;\n\tlocation: string;\n\tcompanyAddress: string;\n\tcategory: string;\n\tgoodsOffered: string;\n\tpancard: string;\n\tcessNo: string;\n\tgst: string;\n\tgstRegistrationType: string;\n\tperiodInDistribution: string;\n\tareaCovered: string;\n\tturnover: string;\n\tRTname1: string;\n\tRTvalue1: string;\n\tRTname2: string;\n\tRTvalue2: string;\n\tRTname3: string;\n\tRTvalue3: string;\n\tpincode: string;\n}\n\nexport interface LandlordFormPayload {\n\tfirstname: string;\n\tlastName: string;\n\temailId: string;\n\tmobile: string;\n\tstate: string;\n\tcity: string;\n\tlocation: string;\n\tlandmark: string;\n\taddress: string;\n\tpincode: string;\n\tlandlordType: string;\n\tlandAddress: string;\n\tlandlocation: string;\n\tplotSize: string;\n\tfrontage: string;\n\tlandLength: string;\n\tlandWidth: string;\n\tcarpetArea: string;\n\tfloorArea: string;\n\tcommercialArea: string;\n\troadWidth: string;\n\troadSideWidth: string;\n\tserviceRoads: string;\n\tpropertyType: string;\n\tdayTimeStreetTraffic: string;\n\tnightTimeStreetTraffic: string;\n\tdeveloperName: string;\n\tmajorResidentialProjects: string;\n\tcommercialProjectsDone: string;\n\tpresence: string;\n\tcatchment: string;\n}\n\nexport interface FormPayload {\n\t[name: string]: string;\n}\n\nexport interface PartnerDataPayload {\n\tpartnerType: string;\n\t'g-recaptcha-response': string;\n\tstatus: string;\n\tcreatedOn: string;\n\tmodifiedOn: string;\n\tsupplier: any;\n\tlandlord: any;\n}\n\n/**\n * Send Form Data Action.\n * @param {any} payload -  FeedbackFormPayload.\n * @returns {any}  Action.\n */\nexport const SendFormDataAction = CreateAction<any>('SendFeedbackData');\n\n/**\n * Change StateOrCity Action.\n * @param {any} payload -  site Id as string.\n * @returns {any}  Action.\n */\nexport const ChangeStateOrCityAction = CreateAction<FormPayload>('ChangeStateOrCity');\n\n/**\n * Clear State Action.\n * @param {any} payload -  any.\n * @returns {any}  Action.\n */\nexport const ClearStateAction = CreateAction('ClearState');\n\n/**\n * Update Form Action.\n * @param {any} payload - FormPayload.\n * @returns {any}  Action.\n */\nexport const UpdateFormAction = CreateAction<FormPayload>('UpdateForm');\n\n/**\n * Save Images Action.\n * @param {any} payload - FormPayload.\n * @returns {any}  Action.\n */\nexport const SaveImagesAction = CreateAction<any>('SaveImages');\n\n/**\n * Get States Action.\n * @param {any} payload - FormPayload.\n * @returns {any}  Action.\n */\nexport const GetStatesAction = CreateAction<any>('GetStates');\n\n/**\n * Update Landlord Form Action.\n * @param {any} payload - FormPayload.\n * @returns {any}  Action.\n */\nexport const UpdateLandlordFormAction = CreateAction<FormPayload>('UpdateLandlordForm');\n\nexport interface ImageType {\n\tname: string;\n\tfile: File;\n}\nexport interface PartnerFormState {\n\tsendFormData: ActionStatus;\n\terrorData: Partial<AjaxError>;\n\tstoreList: Array<any>;\n\tformData: PartnerFormPayload;\n\tlandlordFormData: LandlordFormPayload;\n\tstateList: Array<string>;\n\tcityList: Array<string>;\n\tsaveImages: ActionStatus;\n\tfileIds: Array<string>;\n\timages: Array<ImageType>;\n}\n\nexport interface FeedbackFormActions {\n\ttype: string;\n\tpayload?:\n\t\t| string\n\t\t| AjaxResponse\n\t\t| AjaxError\n\t\t| PartnerFormPayload\n\t\t| FormPayload\n\t\t| PartnerDataPayload\n\t\t| any\n\t\t| LandlordFormPayload\n\t\t| ImageType;\n\tmeta?: any;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const pubURL = process.env.PUBLIC_URL || ''\n        const publicUrl = new URL(pubURL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import { AjaxResponse, AjaxError } from 'rxjs/ajax';\nimport { ActionStatus, CreateAction } from '../../utils/functions';\n\n/**\n * Get Investor Relations Content Action.\n * @param {any} payload -  source Site Id.\n * @returns {any}  Action.\n */\nexport const GetInvestorRelationsContentAction = CreateAction('GetInvestorRelationsContent');\n\n/**\n * Change Section Action.\n * @param {any} payload -  source Site Id.\n * @returns {any}  Action.\n */\nexport const ChangeSectionAction = CreateAction<any>('ChangeSection');\n\n/**\n * Selected Category Action.\n * @param {any} payload -  source Site Id.\n * @returns {any}  Action.\n */\nexport const SelectedCategoryAction = CreateAction<any>('SelectedCategory');\n\ntype PlaceHolder = string | 'InvestorRelations_Details';\ntype Page = 'AboutUs' | 'Home' | 'InvestorRelationPage' | 'SocialOutReach' | string;\ntype Template = 'INVESTOR' | string;\n\nexport interface GetRichContentPayload {\n\tcontentPlaceholder: PlaceHolder;\n\tpage: Page;\n\tisPublished: boolean;\n}\ninterface AdditionalData {\n\tadditionalData: Record<string, any>;\n}\nexport interface FileInfo extends AdditionalData {\n\tfileId: string;\n\tfileName: string;\n\tfileSequence: number;\n\tisPublished: boolean;\n}\nexport interface SubCategoryInfo extends AdditionalData {\n\tname: string;\n\tsequence: number;\n\tisPublished: boolean;\n\tdisplay?: boolean;\n\tfiles: Array<FileInfo>;\n}\nexport interface SubMenuInfo extends AdditionalData {\n\tname: string;\n\tpageTitle: string;\n\tsequence: number;\n\tisPublished: boolean;\n\tsubCategories: Array<SubCategoryInfo>;\n}\nexport interface InvestorContent extends AdditionalData {\n\tinvestorCategoryName: string;\n\tsequence: number;\n\tisPublished: boolean;\n\tsubMenus: Array<SubMenuInfo>;\n}\nexport interface Content<T extends Record<string, any> = any> {\n\tcontentId?: string;\n\tplaceholder: PlaceHolder;\n\tcontentTemplate: Template;\n\tpage: Page;\n\tsequence: number;\n\tisPublished: boolean;\n\tcontent: T;\n}\n\nexport interface FileLink {\n\tfileName: string;\n\tfileId: string;\n}\n\nexport interface Selections {\n\tsections: Array<string>;\n\tsection: string;\n\tsubmenus: Array<string>;\n\tsubmenu: string;\n\tsubcategoryContent: any;\n\tsubcategories: Array<string>;\n\tsubcategory: string;\n\tsubmenuContent: any;\n\tshowSubCategory: boolean;\n\tfileContent: any;\n\tfileLinks: Array<FileLink>;\n\tshowFiles: Array<any>;\n}\n\nexport interface InvestorRelationsState {\n\tgetInvestorRelations: ActionStatus;\n\tinvestorRelationsContent: Array<Content<InvestorContent>>;\n\terrorData: Partial<AjaxError>;\n\tselections: Selections;\n}\n\nexport interface InvestorRelationsActions {\n\ttype: string;\n\tpayload?: string | AjaxResponse | AjaxError | GetRichContentPayload;\n\tmeta?: any;\n}\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable no-redeclare */\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { AjaxError, AjaxResponse } from 'rxjs/ajax';\n\nexport const rem = (value: number, base = 16) => {\n\treturn `${(value / base).toFixed(2)}rem`;\n};\nconst REM = rem;\nexport default REM;\ninterface actionType<T = any> {\n\ttype: string;\n\tpayload?: T;\n\tmeta?: any;\n}\n\nexport const CreateAction = <T extends any = any>(actionName) => {\n\tconst id = nanoid(6);\n\tconst name = `${id}/${actionName}`;\n\tconst success = `${id}/${actionName}_SUCCESS`;\n\tconst cancel = `${id}/${actionName}_CANCEL`;\n\tconst clear = `${id}/${actionName}_CLEAR`;\n\tconst progress = `${id}/${actionName}_PROGRESS`;\n\tconst reload = `${id}/${actionName}_RELOAD`;\n\tconst failure = `${id}/${actionName}_FAILURE`;\n\tfunction action(payload: T, meta?: any): actionType<T>;\n\tfunction action(payload: T, meta: any): actionType<T>;\n\tfunction action(payload?: T, meta?: any): actionType<T>;\n\tfunction action(payload?: T, meta?: any) {\n\t\treturn {\n\t\t\ttype: name,\n\t\t\tpayload,\n\t\t\tmeta\n\t\t};\n\t}\n\treturn {\n\t\tname,\n\t\tsuccess,\n\t\tfailure,\n\t\tprogress,\n\t\treload,\n\t\tcancel,\n\t\tclear,\n\t\taction,\n\t\tsuccessAction: (payload: AjaxResponse, meta?: any) => {\n\t\t\treturn {\n\t\t\t\ttype: success,\n\t\t\t\tpayload,\n\t\t\t\tmeta\n\t\t\t};\n\t\t},\n\t\tfailureAction: (payload: AjaxError, meta?: any) => {\n\t\t\treturn {\n\t\t\t\ttype: failure,\n\t\t\t\tpayload,\n\t\t\t\tmeta\n\t\t\t};\n\t\t},\n\t\tcancelAction: (payload?: Partial<T>, meta?: any) => {\n\t\t\treturn {\n\t\t\t\ttype: cancel,\n\t\t\t\tpayload,\n\t\t\t\tmeta\n\t\t\t};\n\t\t},\n\t\tclearAction: (payload?: Partial<T>, meta?: any) => {\n\t\t\treturn {\n\t\t\t\ttype: clear,\n\t\t\t\tpayload,\n\t\t\t\tmeta\n\t\t\t};\n\t\t},\n\t\tprogressAction: (payload: Partial<T>, meta?: any) => {\n\t\t\treturn {\n\t\t\t\ttype: progress,\n\t\t\t\tpayload,\n\t\t\t\tmeta\n\t\t\t};\n\t\t},\n\t\treloadAction: (payload: Partial<T>, meta?: any) => {\n\t\t\treturn {\n\t\t\t\ttype: reload,\n\t\t\t\tpayload,\n\t\t\t\tmeta\n\t\t\t};\n\t\t}\n\t};\n};\n\nexport enum ActionStatus {\n\tNONE = 'NONE',\n\tLOADING = 'LOADING',\n\tFAILURE = 'FAILURE',\n\tSUCCESS = 'SUCCESS',\n\tRETRYING = 'RETRYING',\n\tRELOADING = 'RELOADING'\n}\nexport enum FormError {\n\tWARN = 'WARN',\n\tINFO = 'INFO',\n\tNONE = 'NONE',\n\tERROR = 'ERROR'\n}\n"],"sourceRoot":""}